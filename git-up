#!/bin/bash

green=$(tput setaf 2)
gold=$(tput setaf 3)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
red=$(tput setaf 1)
default=$(tput sgr0)

BOOTUP=color
RES_COL=0
RES_COL_B=20
MOVE_TO_COL_B="echo -en \\033[${RES_COL_B}G"
MOVE_TO_COL="echo -en \\033[${RES_COL}G"
SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_FAILURE="echo -en \\033[1;31m"
SETCOLOR_WARNING="echo -en \\033[1;33m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"

echo_start() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n $"..."
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  $MOVE_TO_COL_B
  return 0
}

echo_success() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n $" OK "
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\n"
  return 0
}

echo_done() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n $" DONE "
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\n"
  return 0
}

echo_failure() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo -n $"FAILED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\n"
  return 1
}

test_for_success() {
   rc=$1
  if [[ $rc -eq 0 ]]; then
    echo_success
  elif [ "$2" = "allow" ]; then
    echo_failure
  else
    echo_failure
    exit $rc
  fi
}


array=( $(git tag -l --sort=-v:refname) )

version=( ${array[0]//./ } )

usage() { echo "Usage: $0 [ -t major|minor|patch ]" 1>&2; exit 1; }

inc_major() {
  #echo "MAJOR UP"
  ((version[0]=version[0] + 1))
  ((version[1]=0))
  ((version[2]=0))
}

inc_minor() {
  #echo "MINOR UP"
  ((version[1]=version[1] + 1))
  ((version[2]=0))
}

inc_patch() {
  #echo "PATCH UP"
  ((version[2]=version[2] + 1))
}

push_it() {
  echo_start
  echo -n "${gold}Pushing Tags and HEAD to ${1}${default}"
  git push $1 HEAD --tags > /dev/null 2>&1
  test_for_success $1
}

create_tag() {
  git tag -a $1 -m $2
}

test_it() {
  echo "${default}"
  composer run test
}

increment_tag() {
  echo "${cyan}Enter Tag Message:${default}"
  read message

  newtag=${version[0]}.${version[1]}.${version[2]}
  create_tag ${newtag} ${message}

  echo "${default}Tag ${gold}${newtag}${default} created"
}

while getopts ":t:" o; do
    case "${o}" in
        t)
            segment=${OPTARG}
            ((segment == "major" || segment == "minor" || segment == "patch")) || usage
            ;;
        *)
            usage
            ;;
    esac
done

case "$segment" in

  minor)
      inc_minor
      ;;

  major)
      inc_major
      ;;

  patch)
      inc_patch
      ;;

  *)
      inc_patch
      ;;

esac

read -p "${cyan}Do you want to run composer tests first: [y/n]" answer
  case "${answer}" in
      [yY])
          test_it
  esac

read -p "${cyan}Do you want to increment the tag version: [y/n]" answer
  case "${answer}" in
      [yY])
          increment_tag
  esac

for i in $( git remote ); do
  read -p "${cyan}Do you want to push to $i: [y/n]" answer
    case "${answer}" in
        [yY])
            push_it $i
    esac
done